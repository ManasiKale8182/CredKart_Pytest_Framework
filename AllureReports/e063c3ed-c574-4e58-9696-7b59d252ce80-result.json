{"name": "test_CredKart_Login_002", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff7178acda5+78885]\n\tGetHandleVerifier [0x0x7ff7178ace00+78976]\n\t(No symbol) [0x0x7ff717669bca]\n\t(No symbol) [0x0x7ff7176c0766]\n\t(No symbol) [0x0x7ff7176c0a1c]\n\t(No symbol) [0x0x7ff717714467]\n\t(No symbol) [0x0x7ff7176e8bcf]\n\t(No symbol) [0x0x7ff71771122f]\n\t(No symbol) [0x0x7ff7176e8963]\n\t(No symbol) [0x0x7ff7176b16b1]\n\t(No symbol) [0x0x7ff7176b2443]\n\tGetHandleVerifier [0x0x7ff717b84eed+3061101]\n\tGetHandleVerifier [0x0x7ff717b7f33d+3037629]\n\tGetHandleVerifier [0x0x7ff717b9e592+3165202]\n\tGetHandleVerifier [0x0x7ff7178c730e+186766]\n\tGetHandleVerifier [0x0x7ff7178ceb3f+217535]\n\tGetHandleVerifier [0x0x7ff7178b59b4+114740]\n\tGetHandleVerifier [0x0x7ff7178b5b69+115177]\n\tGetHandleVerifier [0x0x7ff71789c368+10728]\n\tBaseThreadInitThunk [0x0x7ff9bfd87374+20]\n\tRtlUserThreadStart [0x0x7ff9c0d5cc91+33]", "trace": "self = <test_CredKart_Login_Params_002.Test_User_Profile_Class object at 0x0000027EF6595F90>\nget_data_for_login = ('credencejune01@credence.in1', 'Credence@123', 'Fail')\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"CredKart login\")\n    @allure.story(\"story: CredKart Login\")\n    @allure.description(\"This test case is to validate Credkart Login functionality\")\n    @allure.issue(\"issue : https://credence.in/\")\n    @allure.link(\"https://credence.in/\")\n    @allure.testcase(\"https://credence.in/\")\n    @allure.epic(\"Epic : CredKart\")\n    @allure.sub_suite(\"CredKart Login\")\n    @allure.title(\"test_CredKart_Login_002\")\n    @pytest.mark.sanity\n    @pytest.mark.web\n    @pytest.mark.flaky(reruns=1, reruns_delay=1)\n    def test_CredKart_Login_params_004(self,get_data_for_login):\n        self.log.info(\"Testcase test_CredKart_Login_002 is started\")\n        self.log.info(f\"Opening browser and landing on login page--{self.login_url}\")\n        self.driver.get(self.login_url)\n        self.lp = Login_Page_Class(self.driver) # Object Creation\n    \n        self.email = get_data_for_login[0]\n        self.password = get_data_for_login[1]\n        self.expected_result = get_data_for_login[2]\n    \n        self.log.info(f\"Entering email--{self.email}\")\n>       self.lp.Enter_Email(self.email) # hard coding\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntestCases\\test_CredKart_Login_Params_002.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\Login_Page.py:20: in Enter_Email\n    self.wait.until(expected_conditions.presence_of_element_located((By.ID, self.text_email_id)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"89214de65ef88991fdfb6537850f1897\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x0000027EF6601DA0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7178acda5+78885]\nE       \tGetHandleVerifier [0x0x7ff7178ace00+78976]\nE       \t(No symbol) [0x0x7ff717669bca]\nE       \t(No symbol) [0x0x7ff7176c0766]\nE       \t(No symbol) [0x0x7ff7176c0a1c]\nE       \t(No symbol) [0x0x7ff717714467]\nE       \t(No symbol) [0x0x7ff7176e8bcf]\nE       \t(No symbol) [0x0x7ff71771122f]\nE       \t(No symbol) [0x0x7ff7176e8963]\nE       \t(No symbol) [0x0x7ff7176b16b1]\nE       \t(No symbol) [0x0x7ff7176b2443]\nE       \tGetHandleVerifier [0x0x7ff717b84eed+3061101]\nE       \tGetHandleVerifier [0x0x7ff717b7f33d+3037629]\nE       \tGetHandleVerifier [0x0x7ff717b9e592+3165202]\nE       \tGetHandleVerifier [0x0x7ff7178c730e+186766]\nE       \tGetHandleVerifier [0x0x7ff7178ceb3f+217535]\nE       \tGetHandleVerifier [0x0x7ff7178b59b4+114740]\nE       \tGetHandleVerifier [0x0x7ff7178b5b69+115177]\nE       \tGetHandleVerifier [0x0x7ff71789c368+10728]\nE       \tBaseThreadInitThunk [0x0x7ff9bfd87374+20]\nE       \tRtlUserThreadStart [0x0x7ff9c0d5cc91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "description": "This test case is to validate Credkart Login functionality", "attachments": [{"name": "log", "source": "22fd7507-c1eb-4d8f-8a48-db41bd53d17d-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "get_data_for_login", "value": "('credencejune01@credence.in1', 'Credence@123', 'Fail')"}], "start": 1750186519147, "stop": 1750186534086, "uuid": "e7390a43-d73d-4327-9dc8-8fba44f6b060", "historyId": "c987e1a12cbaa06d6f5d09afe9e002df", "testCaseId": "50707f256e1e2486b5d621e7bc7f3bdb", "fullName": "testCases.test_CredKart_Login_Params_002.Test_User_Profile_Class#test_CredKart_Login_params_004", "labels": [{"name": "severity", "value": "critical"}, {"name": "subSuite", "value": "CredKart Login"}, {"name": "story", "value": "story: CredKart Login"}, {"name": "feature", "value": "CredKart login"}, {"name": "epic", "value": "Epic : CredKart"}, {"name": "tag", "value": "web"}, {"name": "tag", "value": "sanity"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_CredKart_Login_Params_002"}, {"name": "host", "value": "DESKTOP-C360NUF"}, {"name": "thread", "value": "3260-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_CredKart_Login_Params_002"}], "links": [{"type": "tms", "url": "https://credence.in/", "name": "https://credence.in/"}, {"type": "link", "url": "https://credence.in/", "name": "https://credence.in/"}, {"type": "issue", "url": "issue : https://credence.in/", "name": "issue : https://credence.in/"}]}